//https://gitlab.com/tzaeru/nbody-simulation-tutorial-code-project
//https://www.tzaeru.com/site/compute-shader-basics-with-unity/
//https://mickyd.wordpress.com/2014/02/01/n-body-galaxy-simulation-using-compute-shaders-on-gpgpu-via-unity-3d/
// Each #kernel tells which function to compile; you can have many kernels

//getting units of pc, solMass, Myr BUT radii are in RSun
//I need this in a frame of reference where the galaxy center moves, and the cluster is stationary!

#pragma kernel CoMCompute
#pragma kernel CSMain

uniform RWStructuredBuffer<float3> position : register(u1);
uniform RWStructuredBuffer<float3> velocity : register(u2);
uniform RWStructuredBuffer<float4> mrl : register(u3);
uniform RWStructuredBuffer<float4> tgb : register(u4);
uniform RWStructuredBuffer<float4> lgb : register(u5);

uniform uint NumBodies;
uniform uint NumBodiesMax;
uniform float Softening;
uniform float G;
uniform float neta; //Reimer's mass loss coefficient

uniform float deltaTime; //time elapsed since last frame (dt)
uniform float time; //total elapsed time

//only relevant if we want collisions enabled
uniform float dvelMax; //max velocity for inelastic collision with recoil (otherwise merge bodies)
uniform float rcolFac; //radius scaling for collision detection
uniform float restitution; //factor applied to velocity upon collision recoil 

#define Softening2  Softening*Softening
#define PI 3.141592653589793
#define RSun 2.2546101516841093e-08f

// same as in NBodyCompute
#define BLOCKSIZE	128

//from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
//simple 3D noise
//float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
float4 mod289(float4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
float4 perm(float4 x){return mod289(((x * 34.0) + 1.0) * x);}
float4 fract(float4 p){
	return float4(p.x - floor(p.x), p.y - floor(p.y), p.z - floor(p.z), p.w - floor(p.w));
}
float snoise(float3 p){
    float3 a = floor(p);
    float3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    float4 b = a.xxyy + float4(0.0, 1.0, 0.0, 1.0);
    float4 k1 = perm(b.xyxy);
    float4 k2 = perm(k1.xyxy + b.zzww);

    float4 c = k2 + a.zzzz;
    float4 k3 = perm(c);
    float4 k4 = perm(c + 1.0);

    float4 o1 = fract(k3 * (1.0 / 41.0));
    float4 o2 = fract(k4 * (1.0 / 41.0));

    float4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    float2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}
float gaussRand(float3 seed1, float3 seed2){
	//I *think* snoise return values between 0 and 1, testing with if statment that should return zero from this function if either is > 1
	// e.g., 
	//float X1 = snoise(normalize(seed1));
	//float X2 = snoise(normalize(seed2));
	//if (X1 > 1. || X2 > 1.) return 0.;

	float X1 = clamp(snoise(normalize(seed1)), 0., 1.);
	float X2 = clamp(snoise(normalize(seed2)), 0., 1.);

	return sqrt(-2.*log(X1))*cos(2.*PI*X2);
}

float MSRadFromMass(float m){
	//not sure where this came from
	//http://personal.psu.edu/rbc3/A534/lec18.pdf
	float eta = 0.8f;

	if (m > 1.0){ 
		eta = 0.57;
	} 

	return pow(m, eta);
}

//this should be the identical function to NbodyCompute.cs
float MWmass(float r){

	//Navarro-Frenk-White dark-matter halo mass as a function of radius for galaxy
	//https://en.wikipedia.org/wiki/Navarro%E2%80%93Frenk%E2%80%93White_profile
	//taking these values from table 1 in this paper: https://arxiv.org/pdf/1304.5127.pdf
	//https://ui.adsabs.harvard.edu/abs/2013JCAP...07..016N/abstract
	float Rs = 16100.0;//pc Milky Way scale radius
	float rho0 = 0.014;//Msun/pc**3. Milky Way scale density
	//https://iopscience.iop.org/article/10.1086/589500/pdf
	//https://ui.adsabs.harvard.edu/abs/2008ApJ...684.1143X/abstract
	// float Rs = 22250.0f;//pc Milky Way scale radius
	// float rho0 = 0.0042f ;//Msun/pc**3. Milky Way scale density	
	float MNFW = 4.0*PI*rho0*pow(Rs,3.0)*(log((Rs + r)/Rs) - r/(Rs + r));

	//assume simple spherical ball of constant density for bulge
	float Mbulge = 1.5e10;//Msun
	float Rbulge = 2000.0;//pc
	float rhobulge = Mbulge/(4.0/3.0*PI*pow(Rbulge,3.0));
	float MB = min(4.0/3.0*PI*pow(r, 3.0)*rhobulge, Mbulge);

	//disk
	//also see here: https://academic.oup.com/mnras/article/366/3/899/993295
	float Rdisk = 3000.0;//pc
	float Sdisk = 60.0/exp(-8000/Rdisk);//Msun/pc**2
	float MD = 2.0*PI*Sdisk*Rdisk*Rdisk*(1.0 - (1.0 + r/Rdisk)*exp(-r/Rdisk));

	return MNFW + MB + MD;
}

float mlwindReimers(float L, float R, float M){
	//dmass/dt from winds from Reimer's equation (using eq. 106 in Hurley, Pols & Tout 2000, the SSE paper)
	//is this using the correct units?
	return neta*4e-13*L*R/M;
}

float giantLum(float tbg, float lbg, float AH){
	//RGB luminosity vs. time
	//eq. 25 in Jurley Pols & Tout 2000, the SSE paper

	//I *think* I can use this for both AGB and RGB, but just changing AH
	//on RGB: 	float AH = 1.44e-5; //Msun / Lsun /Myr //eq. a few after 43
	//on AGB:	float AH = 7.66e-5; //Msun / Lsun /Myr //eq. 68

	//simplifying this a little bit, in the paper these constants depend on mass and metallicity
	float p = 5.0;
	float psi = 1.0; //this could depend on metallicity
	float D = pow(10., 5.37 + 0.135*psi);

	float tinf = tbg + 1./(AH*D*(p - 1.))*pow(D/lbg, (p - 1.)/p);

	return max(D*pow( (p - 1.0)*AH*D*(tinf - time), p/(1. - p)), 1e-6);
}

float RGBRad(float m, float L){
	//RGB radius for solar mass stars (could use eq. 46 if we want metallicity dependence)
	//eq. 48 in Hurley, Pols & Tout 2000

	return max(1.1*pow(m, -0.3)*(pow(L, 0.4) + 0.383*pow(L, 0.76)), 0.0);
}
float AGBRad(float m, float L){
	//AGB radius for solar mass stars (could use eq. 74 if we want metallicity dependence)
	//eq. slightly after 74 in Hurley, Pols & Tout 2000
	//nearly identical to the RGBRad... is this a mistake in his paper?

	return max(1.125*pow(m, -0.33)*(pow(L, 0.4) + 0.383*pow(L, 0.76)), 0.0);
}
//for allowing collisions that don't merge...
// I think I need to keep track of aggregate groups, and apply their gravity as a final step.  That way particles that are touching will still feel the gravity of other particles.
// 1. need separate array that sorts the particles (maybe just saves the indices in order)
// 2. then a second array that has the starting indices of each group
// 3. then I just need gravity between groups, and apply the same forces to everyone inside a group

//to check for collisions, I will see if the trajectory of particle idx intersects with particle i, to within the distance set with the radii and rcolFac
//https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line
//http://geomalgorithms.com/a02-_lines.html
//https://stackoverflow.com/questions/3120357/get-closest-point-to-a-line
float4 line_point_dist(float3 A, float3 B, float3 P){

	float3 AB = B - A;
	float3 AP = P - A;
	float3 BP = P - B;

	if (length(AB) == 0.0){
		return float4(A, length(AP));
	}

	float APdotAB = dot(AP, AB);
	float t = APdotAB/(length(AB)*length(AB)); //The normalized "distance" from A to the closest point

	if (t < 0.0){
		// Point is lagging behind start of the segment, so perpendicular distance is not viable.
		// Use distance to start of segment instead.
		return float4(A, length(AP));
	}

	if (t > 1.0){
		// Point is advanced past the end of the segment, so perpendicular distance is not viable.
		// Use distance to end of the segment instead.
		return float4(B, length(BP));
	}

	// Perpendicular distance of point to segment.
	//https://stackoverflow.com/questions/4858264/find-the-distance-from-a-3d-point-to-a-line-segment
	float dist = length(cross(AB, AP))/length(AB);

	return float4(A + AB*t, dist);
}


float4 get_acc_grav_collision(uint idx, float3 pos){
	//4th value is a collision detection
	float3 A = float3(0.0, 0.0, 0.0);
	float AC = -1;

	// Iterate over every body.
	for (uint i = 0; i < NumBodies; i++){
		if (i != idx && mrl[i].x > 0.0){

			float4 intrsct = line_point_dist(position[idx], pos, position[i]);

			if (intrsct.w <= rcolFac*(mrl[i].z + mrl[idx].z)*RSun) {
				//collision
				AC = i;

			} else {
				//normal gravity
				float3 D = position[i] - pos;
				float r = length(D);
				float fm = G*mrl[i].x/(r*r + Softening2);
				A += fm*normalize(D);
			}

		}
	}

	return float4(A, AC);

}  

float3 get_acc_grav_simple(uint idx){
	float3 A = float3(0.0, 0.0, 0.0);

	// Iterate over every body.
	//for (uint i = 0; i < NumBodies; i++){
	for (uint i = 0; i < NumBodies-1; i++){ //last one is the full cluster for center of mass calculation?
		if (i != idx){

			//normal gravity
			float3 D = position[i] - position[idx];
			float r = length(D);
			float fm = G*mrl[i].x/(r*r + Softening2);
			A += fm*normalize(D);

		}
	}
	return A;
}  

float3 get_acc_grav_galaxy(uint idx){
	//acceleration from point-mass galaxy, assuming Mgal >> gal, and Rgc is constant (fmGal = G*Mgal/Rgc**2)
	//float3 D = galPos - position[idx]; 
	float3 D = -position[idx]; 
	float r = length(D);
	float galMass = MWmass(r);
	return G*galMass/(r*r)*normalize(D);
}

//Verlet leapfrog
//https://en.wikipedia.org/wiki/Verlet_integration
float4x4 integrateVerletCollision(uint idx, float dt){
// void integrateVerlet(uint idx, float dt){

	float4 old_acc = get_acc_grav_collision(idx, position[idx]);
	float3 new_pos = position[idx] + velocity[idx]*dt + 0.5*old_acc.xyz*dt*dt;
	float4 new_acc = get_acc_grav_collision(idx, new_pos);
	float3 new_vel = velocity[idx] + 0.5*(old_acc.xyz + new_acc.xyz)*dt;

	return float4x4(float4(new_pos,0), float4(new_vel,0), new_acc, float4(0,0,0,0));
}


//Verlet leapfrog
//https://en.wikipedia.org/wiki/Verlet_integration
void integrateVerletWithCollision(uint idx, float dt){
// void integrateVerlet(uint idx, float dt){

	float4x4 result = integrateVerletCollision(idx, dt);
	float3 new_pos = result[0].xyz;
	float3 new_vel = result[1].xyz;
	float4 new_acc = result[2];

	//simple inelastic collision detection
	//if (old_acc.w != -1 || new_acc.w != -1) {
	if (new_acc.w != -1) {
		new_pos = position[idx];
		new_vel = velocity[idx];

		//get the fraction of the time until the collision
		uint i = new_acc.w;

		float3 A = position[idx];
		float3 B = new_pos;
		float3 P = position[i];
		float4 pt = line_point_dist(A, B, P); //need this for the intersection position.  can I just get t from here?
		float3 AB = B - A;
		float3 AP = P - A;
		float APdotAB = dot(AP, AB);
		float t = APdotAB/(length(AB)*length(AB)); //The normalized "distance" from A to the closest point
		t = min(max(t, 0.0), 1.0); //to be safe (is there a clamp function?)

		/////////////////////////////////////////////
		//take the first step, which will result in the collision
		float dt1 = dt*t;
		if (dt1 > 0.0){
			result = integrateVerletCollision(idx, dt1);
			new_pos = result[0].xyz;
			new_vel = result[1].xyz;
			position[idx] = new_pos;
			velocity[idx] = new_vel;
		}
		/////////////////////////////////////////////

		/////////////////////////////////////////////
		//apply the collision
		//I would like to make this it's own function, but for some reason it won't work that way.  No idea why!

		float3 dvel = velocity[i] - velocity[idx];

		if (length(dvel) >= dvelMax){
			//inelastic collisions with restitution (bounce off with some friction term)
			new_vel *= -restitution;
			new_pos = pt.xyz; 

		} else {
			
			//inelastic collisions that stick together
			float totalMass = mrl[idx].x + mrl[i].x;
			float3 mom = mrl[idx].x*velocity[idx] + mrl[i].x*velocity[i];

			if (idx < i && totalMass > 0.0) {

				// This particle is aggregated by the other
				new_vel = mom/totalMass;
				new_pos = (position[idx]*mrl[idx].x + position[i]*mrl[i].x)/totalMass;
				//luminosity[idx] = ?
				mrl[idx].x = totalMass;
				//radius[idx] = MSRadFromMass(totalMass);

			} else {
				// This particle dies
				mrl[idx].x = 0.0;
				mrl[idx].z = 0.0;
				new_vel = 0.0;
			}
		}
		position[idx] = new_pos;
		velocity[idx] = new_vel;
		/////////////////////////////////////////////

		/////////////////////////////////////////////
		// now take the remaining time step
		if (dt - dt1 > 0.0){
			result = integrateVerletCollision(idx, dt - dt1);
			if (result[2].w == -1) { //what if there is also a collision here??  with this if statement, I'm back to the same problem with aggregate bodies not attracting eachother.  Without this, everything collapses.
				new_pos = result[0].xyz;
				new_vel = result[1].xyz;
			}
		}
		/////////////////////////////////////////////

	}

	position[idx] = new_pos;
	velocity[idx] = new_vel;

}

// //rk4
// //http://spiff.rit.edu/richmond/nbody/OrbitRungeKutta4.pdf
// //I added the velocities for my collision detection, but is this correct?
// void integrateRK4(uint idx){
// 	//float3 dxC = handle_collisions(idx, float3(0,0,0));

// 	float3 k1r = velocity[idx];
// 	float3 k1v = get_acc_grav(idx, position[idx]);

// 	float3 k2r = velocity[idx]*k1v*deltaTime/2.;
// 	float3 k2v = get_acc_grav(idx, position[idx] + k1r*deltaTime/2.);	

// 	float3 k3r = velocity[idx]*k2v*deltaTime/2.;
// 	float3 k3v = get_acc_grav(idx, position[idx] + k2r*deltaTime/2.);

// 	float3 k4r = velocity[idx]*k3v*deltaTime; 
// 	float3 k4v = get_acc_grav(idx, position[idx] + k3r*deltaTime);

// 	//check if we had any collisions
// 	float3 dx = deltaTime/6.*(k1r + 2.*k2r + 2.*k3r + k4r);
// 	float3 dv = deltaTime/6.*(k1v + 2.*k2v + 2.*k3v + k4v);

// 	position[idx] += dx;
// 	velocity[idx] += dv;

// }


//Verlet leapfrog
//https://en.wikipedia.org/wiki/Verlet_integration
void integrateVerletSimple(uint idx, float dt){
// void integrateVerlet(uint idx, float dt){


	float3 old_acc = get_acc_grav_simple(idx) + get_acc_grav_galaxy(idx);
	//float3 old_acc = get_acc_grav_galaxy(idx);
	position[idx] += velocity[idx]*dt + 0.5*old_acc*dt*dt;
	float3 new_acc = get_acc_grav_simple(idx) + get_acc_grav_galaxy(idx);
	//float3 new_acc = get_acc_grav_galaxy(idx);
	velocity[idx] += 0.5*(old_acc + new_acc)*dt;

}

void integrateSimple(uint idx, float dt){
// void integrateVerlet(uint idx, float dt){

	float3 acc = get_acc_grav_simple(idx);
	velocity[idx] += acc*dt;
	position[idx] += velocity[idx]*dt;// + 0.5*acc*dt*dt;

}
void applyStellarEvolution(uint idx, float dt){
	if (time >= tgb[idx].x && time < tgb[idx].y){ // RGB
		float ml = mlwindReimers(mrl[idx].w, mrl[idx].z, mrl[idx].x)*dt;
		mrl[idx].x -= ml;
		mrl[idx].w = giantLum(tgb[idx].x, lgb[idx].x, 1.44e-5);
		mrl[idx].z = RGBRad(mrl[idx].x, mrl[idx].w);
	}  
	if (time >= tgb[idx].y && time < tgb[idx].z){ //He burning
		mrl[idx].w = lgb[idx].y; //no evolution for now
		mrl[idx].z = RGBRad(mrl[idx].x, mrl[idx].w); //this calculation is actually only needed once if the luminosity doesn't change
	}  
	if (time >= tgb[idx].z && time < tgb[idx].w){// AGB
		//for now
		float ml = mlwindReimers(mrl[idx].w, mrl[idx].z, mrl[idx].x)*dt;
		mrl[idx].x -= ml;
		mrl[idx].w = giantLum(tgb[idx].z, lgb[idx].z, 7.66e-5);
		mrl[idx].z = AGBRad(mrl[idx].x, mrl[idx].w);
	}  
	if (time >= tgb[idx].w && time < tgb[idx].w + dt && mrl[idx].y > 4){ //supernova
		mrl[idx].w = -40.0;
		//apply the kick only to NSs?
		if (mrl[idx].y > 4.0 && mrl[idx].y <= 20){ 
			float vkick = 265.*gaussRand(velocity[idx], position[idx]);
			float3 vCoM = velocity[NumBodies - 1];
			velocity[idx] = (velocity[idx] - vCoM)*vkick + vCoM;// sigma for NS SNe kick from Hobbs
		}
	}
	if (time > tgb[idx].w + dt){ //remnant phase
		//approximate divisions
		mrl[idx].z = 5.0;
		if (mrl[idx].y > 20.0){ // black holes
			//BH render type
			mrl[idx].w = -30.0;
			//assume to mass is lost
		} 
		if (mrl[idx].y > 4.0 && mrl[idx].y <= 20){ //neutron stars
			//NS render type
			mrl[idx].w = -20.0;
			mrl[idx].x = 2.0;
		}
		if (mrl[idx].y <= 4) { //white dwarfs
			//set render type
			mrl[idx].w = -10.0;
			mrl[idx].x = 0.5;

		}
	} 
}


[numthreads(BLOCKSIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

//both integrators seem to work OK with my simple test if Softening ~ 25, and collision detection is on
//RK4 has some bug, but since Verlet is working, I didn't fix it (yet)

	uint idx = NumBodies - 1;
	float dt = deltaTime;

	if (mrl[id.x].x > 0.0 && id.x != idx){ //avoid the cluster mass body

		//integrateVerletWithCollision(id.x, dt);
		integrateVerletSimple(id.x, dt);
		applyStellarEvolution(id.x, dt);

		//integrateSimple(id.x, deltaTime);

		//integrateRK4(id.x);

		//shift to the center-of-mass frame using the computed full cluster position
		position[id.x + NumBodiesMax] = position[id.x] - position[idx];

	}
}

float3 CoM(){
	float3 p = float3(0.0, 0.0, 0.0);

	// Iterate over every body.
	for (uint i = 0; i < NumBodies; i++){

		p += position[i];

	}
	return p/NumBodies;
} 

//run this in the separate Kernel so that it is always executed first (hopefully)
// otherwise, some of the particles are shifted before others, and the cluster appears to blink
[numthreads(1,1,1)]
void CoMCompute (uint3 id : SV_DispatchThreadID)
{
	uint idx = NumBodies - 1;
	float dt = deltaTime;

	//position[idx] = CoM();

	float3 old_acc = get_acc_grav_galaxy(idx);
	position[idx] += velocity[idx]*dt + 0.5*old_acc*dt*dt;
	float3 new_acc = get_acc_grav_galaxy(idx);
	velocity[idx] += 0.5*(old_acc + new_acc)*dt;

}
